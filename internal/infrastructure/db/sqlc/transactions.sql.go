// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  id,
  tenant_id,
  wallet_id,
  provider_id,
  currency_code,
  reference,
  type,
  status,
  amount,
  fee,
  metadata,
  error_reason,
  created_at,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, now(), now()
) RETURNING id, tenant_id, wallet_id, provider_id, currency_code, reference, type, status, amount, fee, metadata, error_reason, created_at, updated_at
`

type CreateTransactionParams struct {
	ID           pgtype.UUID
	TenantID     pgtype.UUID
	WalletID     pgtype.UUID
	ProviderID   pgtype.UUID
	CurrencyCode string
	Reference    string
	Type         string
	Status       string
	Amount       decimal.Decimal
	Fee          decimal.Decimal
	Metadata     []byte
	ErrorReason  pgtype.Text
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.ID,
		arg.TenantID,
		arg.WalletID,
		arg.ProviderID,
		arg.CurrencyCode,
		arg.Reference,
		arg.Type,
		arg.Status,
		arg.Amount,
		arg.Fee,
		arg.Metadata,
		arg.ErrorReason,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.WalletID,
		&i.ProviderID,
		&i.CurrencyCode,
		&i.Reference,
		&i.Type,
		&i.Status,
		&i.Amount,
		&i.Fee,
		&i.Metadata,
		&i.ErrorReason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTransactionsByWalletID = `-- name: ListTransactionsByWalletID :many
SELECT id, tenant_id, wallet_id, provider_id, currency_code, reference, type, status, amount, fee, metadata, error_reason, created_at, updated_at FROM transactions WHERE wallet_id = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListTransactionsByWalletIDParams struct {
	WalletID pgtype.UUID
	Limit    int32
	Offset   int32
}

func (q *Queries) ListTransactionsByWalletID(ctx context.Context, arg ListTransactionsByWalletIDParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsByWalletID, arg.WalletID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.WalletID,
			&i.ProviderID,
			&i.CurrencyCode,
			&i.Reference,
			&i.Type,
			&i.Status,
			&i.Amount,
			&i.Fee,
			&i.Metadata,
			&i.ErrorReason,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
