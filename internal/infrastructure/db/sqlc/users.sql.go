// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, tenant_id, email, phone, password_hash, is_active, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, now(), now())
RETURNING id, tenant_id, email, phone, password_hash, is_active, created_at, updated_at
`

type CreateUserParams struct {
	ID           pgtype.UUID
	TenantID     pgtype.UUID
	Email        string
	Phone        pgtype.Text
	PasswordHash string
	IsActive     pgtype.Bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.TenantID,
		arg.Email,
		arg.Phone,
		arg.PasswordHash,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users
SET is_active = false, updated_at = now()
WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, tenant_id, email, phone, password_hash, is_active, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmailAndTenantID = `-- name: GetUserByEmailAndTenantID :one
SELECT id, tenant_id, email, phone, password_hash, is_active, created_at, updated_at FROM users
WHERE email = $1 AND tenant_id = $2
`

type GetUserByEmailAndTenantIDParams struct {
	Email    string
	TenantID pgtype.UUID
}

func (q *Queries) GetUserByEmailAndTenantID(ctx context.Context, arg GetUserByEmailAndTenantIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmailAndTenantID, arg.Email, arg.TenantID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, tenant_id, email, phone, password_hash, is_active, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsersByTenant = `-- name: ListUsersByTenant :many
SELECT id, tenant_id, email, phone, password_hash, is_active, created_at, updated_at FROM users
WHERE tenant_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUsersByTenant(ctx context.Context, tenantID pgtype.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Email,
			&i.Phone,
			&i.PasswordHash,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
