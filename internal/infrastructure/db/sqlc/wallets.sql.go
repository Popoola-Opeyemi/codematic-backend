// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: wallets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const getWalletByID = `-- name: GetWalletByID :one
SELECT id, user_id, wallet_type_id, balance, created_at, updated_at FROM wallets WHERE id = $1
`

func (q *Queries) GetWalletByID(ctx context.Context, id pgtype.UUID) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByID, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletTypeID,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWalletsByUserID = `-- name: ListWalletsByUserID :many
SELECT id, user_id, wallet_type_id, balance, created_at, updated_at FROM wallets WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListWalletsByUserID(ctx context.Context, userID pgtype.UUID) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, listWalletsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WalletTypeID,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWalletBalance = `-- name: UpdateWalletBalance :exec
UPDATE wallets SET balance = $1, updated_at = now() WHERE id = $2
`

type UpdateWalletBalanceParams struct {
	Balance *decimal.Decimal
	ID      pgtype.UUID
}

func (q *Queries) UpdateWalletBalance(ctx context.Context, arg UpdateWalletBalanceParams) error {
	_, err := q.db.Exec(ctx, updateWalletBalance, arg.Balance, arg.ID)
	return err
}
