// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: idempotency.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getIdempotencyRecord = `-- name: GetIdempotencyRecord :one
SELECT id, tenant_id, user_id, idempotency_key, endpoint, request_hash, response_body, status_code, created_at, updated_at FROM idempotency_keys
WHERE tenant_id = $1
  AND idempotency_key = $2
  AND endpoint = $3
  AND request_hash = $4
`

type GetIdempotencyRecordParams struct {
	TenantID       pgtype.UUID
	IdempotencyKey string
	Endpoint       string
	RequestHash    string
}

func (q *Queries) GetIdempotencyRecord(ctx context.Context, arg GetIdempotencyRecordParams) (IdempotencyKey, error) {
	row := q.db.QueryRow(ctx, getIdempotencyRecord,
		arg.TenantID,
		arg.IdempotencyKey,
		arg.Endpoint,
		arg.RequestHash,
	)
	var i IdempotencyKey
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UserID,
		&i.IdempotencyKey,
		&i.Endpoint,
		&i.RequestHash,
		&i.ResponseBody,
		&i.StatusCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveIdempotencyRecord = `-- name: SaveIdempotencyRecord :one
INSERT INTO idempotency_keys (
  id, tenant_id, user_id, idempotency_key, endpoint, request_hash, response_body, status_code, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, now(), now()
)
ON CONFLICT (tenant_id, idempotency_key, endpoint)
DO UPDATE SET
  response_body = EXCLUDED.response_body,
  status_code = EXCLUDED.status_code,
  updated_at = now()
RETURNING id, tenant_id, user_id, idempotency_key, endpoint, request_hash, response_body, status_code, created_at, updated_at
`

type SaveIdempotencyRecordParams struct {
	ID             pgtype.UUID
	TenantID       pgtype.UUID
	UserID         pgtype.UUID
	IdempotencyKey string
	Endpoint       string
	RequestHash    string
	ResponseBody   []byte
	StatusCode     pgtype.Int4
}

func (q *Queries) SaveIdempotencyRecord(ctx context.Context, arg SaveIdempotencyRecordParams) (IdempotencyKey, error) {
	row := q.db.QueryRow(ctx, saveIdempotencyRecord,
		arg.ID,
		arg.TenantID,
		arg.UserID,
		arg.IdempotencyKey,
		arg.Endpoint,
		arg.RequestHash,
		arg.ResponseBody,
		arg.StatusCode,
	)
	var i IdempotencyKey
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UserID,
		&i.IdempotencyKey,
		&i.Endpoint,
		&i.RequestHash,
		&i.ResponseBody,
		&i.StatusCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
