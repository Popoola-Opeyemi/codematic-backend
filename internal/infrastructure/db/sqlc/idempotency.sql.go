// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: idempotency.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIdempotencyKey = `-- name: CreateIdempotencyKey :exec
INSERT INTO idempotency_keys (
  id,
  tenant_id,
  user_id,
  idempotency_key,
  endpoint,
  request_hash,
  response_body,
  status_code
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
ON CONFLICT (tenant_id, idempotency_key, endpoint) DO NOTHING
`

type CreateIdempotencyKeyParams struct {
	ID             pgtype.UUID
	TenantID       pgtype.UUID
	UserID         pgtype.UUID
	IdempotencyKey string
	Endpoint       string
	RequestHash    string
	ResponseBody   []byte
	StatusCode     pgtype.Int4
}

func (q *Queries) CreateIdempotencyKey(ctx context.Context, arg CreateIdempotencyKeyParams) error {
	_, err := q.db.Exec(ctx, createIdempotencyKey,
		arg.ID,
		arg.TenantID,
		arg.UserID,
		arg.IdempotencyKey,
		arg.Endpoint,
		arg.RequestHash,
		arg.ResponseBody,
		arg.StatusCode,
	)
	return err
}

const getIdempotencyByKeyAndEndpoint = `-- name: GetIdempotencyByKeyAndEndpoint :one
SELECT
  id,
  tenant_id,
  user_id,
  idempotency_key,
  endpoint,
  request_hash,
  response_body,
  status_code,
  created_at,
  updated_at
FROM idempotency_keys
WHERE tenant_id      = $1
  AND idempotency_key = $2
  AND endpoint        = $3
LIMIT 1
`

type GetIdempotencyByKeyAndEndpointParams struct {
	TenantID       pgtype.UUID
	IdempotencyKey string
	Endpoint       string
}

func (q *Queries) GetIdempotencyByKeyAndEndpoint(ctx context.Context, arg GetIdempotencyByKeyAndEndpointParams) (IdempotencyKey, error) {
	row := q.db.QueryRow(ctx, getIdempotencyByKeyAndEndpoint, arg.TenantID, arg.IdempotencyKey, arg.Endpoint)
	var i IdempotencyKey
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UserID,
		&i.IdempotencyKey,
		&i.Endpoint,
		&i.RequestHash,
		&i.ResponseBody,
		&i.StatusCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
