// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: providers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProvider = `-- name: CreateProvider :one
INSERT INTO providers (
  name, code, config, is_active
) VALUES (
  $1, $2, $3, COALESCE($4, true)
)
RETURNING id, name, code, config, is_active, created_at, updated_at
`

type CreateProviderParams struct {
	Name    string
	Code    string
	Config  []byte
	Column4 interface{}
}

func (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (Provider, error) {
	row := q.db.QueryRow(ctx, createProvider,
		arg.Name,
		arg.Code,
		arg.Config,
		arg.Column4,
	)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateProvider = `-- name: DeactivateProvider :exec
UPDATE providers
SET is_active = false,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) DeactivateProvider(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deactivateProvider, id)
	return err
}

const getProviderByCode = `-- name: GetProviderByCode :one
SELECT id, name, code, config, is_active, created_at, updated_at FROM providers
WHERE code = $1
`

func (q *Queries) GetProviderByCode(ctx context.Context, code string) (Provider, error) {
	row := q.db.QueryRow(ctx, getProviderByCode, code)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProviderByID = `-- name: GetProviderByID :one
SELECT id, name, code, config, is_active, created_at, updated_at FROM providers
WHERE id = $1
`

func (q *Queries) GetProviderByID(ctx context.Context, id pgtype.UUID) (Provider, error) {
	row := q.db.QueryRow(ctx, getProviderByID, id)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveProviders = `-- name: ListActiveProviders :many
SELECT id, name, code, config, is_active, created_at, updated_at FROM providers
WHERE is_active = true
ORDER BY name
`

func (q *Queries) ListActiveProviders(ctx context.Context) ([]Provider, error) {
	rows, err := q.db.Query(ctx, listActiveProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Provider
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Config,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProviderConfig = `-- name: UpdateProviderConfig :one
UPDATE providers
SET config = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, name, code, config, is_active, created_at, updated_at
`

type UpdateProviderConfigParams struct {
	ID     pgtype.UUID
	Config []byte
}

func (q *Queries) UpdateProviderConfig(ctx context.Context, arg UpdateProviderConfigParams) (Provider, error) {
	row := q.db.QueryRow(ctx, updateProviderConfig, arg.ID, arg.Config)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
