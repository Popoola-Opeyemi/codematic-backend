// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: webhooks.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWebhookEvent = `-- name: CreateWebhookEvent :one
INSERT INTO webhook_events (
  id, provider_id, provider_event_id, tenant_id, event_type, payload, status, attempts, last_error, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, provider_id, provider_event_id, tenant_id, event_type, payload, status, attempts, last_error, created_at, updated_at
`

type CreateWebhookEventParams struct {
	ID              pgtype.UUID
	ProviderID      pgtype.UUID
	ProviderEventID string
	TenantID        pgtype.UUID
	EventType       string
	Payload         json.RawMessage
	Status          string
	Attempts        pgtype.Int4
	LastError       pgtype.Text
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
}

func (q *Queries) CreateWebhookEvent(ctx context.Context, arg CreateWebhookEventParams) (WebhookEvent, error) {
	row := q.db.QueryRow(ctx, createWebhookEvent,
		arg.ID,
		arg.ProviderID,
		arg.ProviderEventID,
		arg.TenantID,
		arg.EventType,
		arg.Payload,
		arg.Status,
		arg.Attempts,
		arg.LastError,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i WebhookEvent
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.ProviderEventID,
		&i.TenantID,
		&i.EventType,
		&i.Payload,
		&i.Status,
		&i.Attempts,
		&i.LastError,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWebhookEventByProviderAndEventID = `-- name: GetWebhookEventByProviderAndEventID :one
SELECT id, provider_id, provider_event_id, tenant_id, event_type, payload, status, attempts, last_error, created_at, updated_at FROM webhook_events WHERE provider_id = $1 AND provider_event_id = $2
`

type GetWebhookEventByProviderAndEventIDParams struct {
	ProviderID      pgtype.UUID
	ProviderEventID string
}

func (q *Queries) GetWebhookEventByProviderAndEventID(ctx context.Context, arg GetWebhookEventByProviderAndEventIDParams) (WebhookEvent, error) {
	row := q.db.QueryRow(ctx, getWebhookEventByProviderAndEventID, arg.ProviderID, arg.ProviderEventID)
	var i WebhookEvent
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.ProviderEventID,
		&i.TenantID,
		&i.EventType,
		&i.Payload,
		&i.Status,
		&i.Attempts,
		&i.LastError,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFailedWebhookEvents = `-- name: ListFailedWebhookEvents :many
SELECT id, provider_id, provider_event_id, tenant_id, event_type, payload, status, attempts, last_error, created_at, updated_at FROM webhook_events WHERE status = 'failed'
`

func (q *Queries) ListFailedWebhookEvents(ctx context.Context) ([]WebhookEvent, error) {
	rows, err := q.db.Query(ctx, listFailedWebhookEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebhookEvent
	for rows.Next() {
		var i WebhookEvent
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.ProviderEventID,
			&i.TenantID,
			&i.EventType,
			&i.Payload,
			&i.Status,
			&i.Attempts,
			&i.LastError,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWebhookEventStatus = `-- name: UpdateWebhookEventStatus :exec
UPDATE webhook_events SET status = $1, attempts = $2, last_error = $3, updated_at = $4 WHERE id = $5
`

type UpdateWebhookEventStatusParams struct {
	Status    string
	Attempts  pgtype.Int4
	LastError pgtype.Text
	UpdatedAt pgtype.Timestamptz
	ID        pgtype.UUID
}

func (q *Queries) UpdateWebhookEventStatus(ctx context.Context, arg UpdateWebhookEventStatusParams) error {
	_, err := q.db.Exec(ctx, updateWebhookEventStatus,
		arg.Status,
		arg.Attempts,
		arg.LastError,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
